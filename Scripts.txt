EVALUACIÓN FINAL BASES DE DATOS NO RELACIONALES

- Se inicia el servidor mongo ejecutando mongod.exe
- Se ejecuta mongo.exe para iniciar el proceso de crear, restaurar base de datos y realizar todo lo solicitado en la evaluación.
- Creando base de datos usando_mas
use usando_mas
- Restaurando base de datos artículos en la base de datos usando_mas
mongorestore - usando_mas dump/
- Insertando nuevos datos a la colección artículos
db.articulos.insert({"nombre":"mesa","color":"gris","material":"madera","precio":100})
db.articulos.insert({"nombre":"florero","color":"azul","precio":10,"creado_por":"aaa"})
db.articulos.insert({"nombre":"licuadora","precio":50,"marca":"negro y blanco"})
---------------------------------------------------------------------------------

- Una vez actualizada la información, el director requiere de unos listados que presentará al CEO
de la Fundación con la finalidad de analizar el progreso de este programa de venta de artículos usados y planificar acciones futuras.
A continuación, la información que debe contener cada listado para el CEO: 

1.Todos los artículos con todos sus atributos
db.articulos.find();

2.Todos los artículos con solo nombre y costo del producto
db.articulos.find().sort({ nombre: 1 , precio: 1 })

3.Todos los artículos con solo nombre y costo del producto ordenados por costo REVISAR
db.articulos.find({},{nombre:1, precio:1}).sort({precio:1})

4.Todos los productos de color azul.
db.articulos.find({ color: "azul" })

5.Todos los productos con precio menor a 50, ordenados descendentemente por precio.
db.articulos.find({"precio": {$lt: 50}}).sort({precio:-1})

6.Todos los productos que son azules o el precio es mayor que 50
db.articulos.find({$or:[{color:"azul"},{precio:{$gt:50}}]})
----------------------------------------------------------------------------

- El director también desea los siguientes listados para el análisis de ventas: 

1.Cantidad de productos agrupados por color.
db.articulos.aggregate([{"$group" : {_id:"$color", total:{$sum:1}}}])

2.Cantidad de productos agrupados por color con precio menor a 80.
db.articulos.aggregate([{$match: {precio: {$lt:80 }}},{ $group: {_id: "$color", total: {$sum: 1 }}}])

